# objects are blocks of code
{
    out "i'm an object!"
}

# they can accept parameters
(name: str){
    out("your name is " + name)
}

# literal values cause an object to return
var = { "this is in a var" }
var out #=> this is in a var

# object literals are evaluated on reference
{
    out "i won't ever run :("
}

ref = { out "but i will! :D" }
ref #=> but i will! :D

# this can be prevented by wrapping the variable in an object
{ ref } out #=> error: can't print object

# object literals can be explicitly evaluated as well
{
    out "this is being output!"
}() #=> this is being output!

# variables are local to scope
(){
    hello = "hello"
}
out hello #=> error: hello not defined

(name){
    thisName = name
}

out thisName
